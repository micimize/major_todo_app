# TODO It might make more sense to have two different flows for the backend,
# 
on:
  push:
    paths:
      - 'backend/@app/*'
    branches:
      - master

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest

    env:
      NODE_ENV: 'production'
      DATABASE_PORT: '5432'
      DATABASE_NAME: 'todo_app'
      ENABLE_GRAPHIQL: 'true'
      DATABASE_VISITOR: 'todo_app_visitor'

      DATABASE_SUPERUSER: 'postgres'
      DATABASE_SUPERUSER_PASSWORD: ${{ secrets.DATABASE_SUPERUSER_PASSWORD }}

      DATABASE_OWNER: 'todo_app'
      DATABASE_OWNER_PASSWORD: ${{ secrets.DATABASE_OWNER_PASSWORD }}

      DATABASE_AUTHENTICATOR: 'todo_app_authenticator'
      DATABASE_AUTHENTICATOR_PASSWORD: ${{ secrets.DATABASE_AUTHENTICATOR_PASSWORD }}

      DATABASE_INSTANCE: ${{ secrets.DATABASE_INSTANCE }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GITHUB_KEY: ${{ secrets.GITHUB_KEY }}
      GITHUB_SECRET: ${{ secrets.GITHUB_SECRET }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    steps:
    - uses: actions/checkout@v2

    - name: Activate Service Account
      run: |
        # The service account needs the following roles:
        # * App Engine Deployer
        # * App Engine Service Admin
        # * Cloud Build Service Account
        # * Cloud SQL Client
        # * Storage Object Creator
        # * Storage Object Viewer 
        #
        # You also need:
        # * a Cloud SQL instance created, secured, and setup (act/cloud_sql_setup.sh),
        # * a GAE created & Cloud Build API enabled
        echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" |
          base64 --decode /dev/stdin > client-secret.json
        gcloud auth activate-service-account \
          ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }} \
          --key-file=client-secret.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

    - name: Run Database Migrations
      working-directory: 'backend/@app/db/'
      run: |
        # we use the cloud_sql_proxy so we can auth with the service account
        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
        chmod +x cloud_sql_proxy
        # We background the proxy, which (I'm pretty sure) gets auto-garbage collected
        # TODO this only works without a race condition because yarn is slowish
        ./cloud_sql_proxy -instances=${{ secrets.DATABASE_INSTANCE  }}=tcp:5432 &
        yarn && yarn migrate
      env:
        DATABASE_HOST: 'localhost'


    - name: Publish Server to Google App Engine
      working-directory: 'backend/@app/server/'
      run: |
        yarn && yarn build && yarn gae:configure
        cat app.yml
        gcloud -q app deploy app.yml --promote


